import { db } from '../lib/firebase';
import { collection, doc, getDoc, getDocs, deleteDoc, addDoc } from 'firebase/firestore';

export interface GeneratedDesign {
  id?: string;
  name: string;
  description: string;
  style: string;
  keyFeatures: string[];
  estimatedPrice: string;
  characteristics: {
    exterior: string[];
    interior: string[];
    materials: string[];
    sustainability: string[];
  };
  suitability: string[];
  createdAt: string;
  prompt: string;
}

/**
 * Save a generated design to the user's collection
 * @param userId User ID
 * @param design Design data
 * @returns Object with success flag and design ID
 */
export const saveGeneratedDesign = async (userId: string, design: Omit<GeneratedDesign, 'createdAt'>) => {
  try {
    const userDesignsCollection = collection(db, 'users', userId, 'generatedDesigns');
    
    const designData: GeneratedDesign = {
      ...design,
      createdAt: new Date().toISOString()
    };
    
    const docRef = await addDoc(userDesignsCollection, designData);
    
    return { 
      success: true, 
      designId: docRef.id 
    };
  } catch (error) {
    console.error('Error saving generated design:', error);
    return { 
      success: false, 
      error: error instanceof Error ? error.message : 'Failed to save design' 
    };
  }
};

/**
 * Get all designs generated by a user
 * @param userId User ID
 * @returns Object with success flag and array of designs
 */
export const getUserGeneratedDesigns = async (userId: string) => {
  try {
    const userDesignsCollection = collection(db, 'users', userId, 'generatedDesigns');
    const querySnapshot = await getDocs(userDesignsCollection);
    
    const designs: GeneratedDesign[] = [];
    querySnapshot.forEach((doc) => {
      designs.push({
        id: doc.id,
        ...doc.data() as Omit<GeneratedDesign, 'id'>
      });
    });
    
    // Sort by createdAt date, newest first
    designs.sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime());
    
    return { 
      success: true, 
      designs 
    };
  } catch (error) {
    console.error('Error getting user designs:', error);
    return { 
      success: false, 
      error: error instanceof Error ? error.message : 'Failed to retrieve designs',
      designs: []
    };
  }
};

/**
 * Get a specific design by ID
 * @param userId User ID
 * @param designId Design ID
 * @returns Object with success flag and design data
 */
export const getGeneratedDesign = async (userId: string, designId: string) => {
  try {
    const designRef = doc(db, 'users', userId, 'generatedDesigns', designId);
    const docSnap = await getDoc(designRef);
    
    if (docSnap.exists()) {
      return { 
        success: true, 
        design: {
          id: docSnap.id,
          ...docSnap.data() as Omit<GeneratedDesign, 'id'>
        } as GeneratedDesign
      };
    } else {
      return { 
        success: false, 
        error: 'Design not found' 
      };
    }
  } catch (error) {
    console.error('Error getting design:', error);
    return { 
      success: false, 
      error: error instanceof Error ? error.message : 'Failed to retrieve design' 
    };
  }
};

/**
 * Delete a generated design
 * @param userId User ID
 * @param designId Design ID
 * @returns Object with success flag
 */
export const deleteGeneratedDesign = async (userId: string, designId: string) => {
  try {
    const designRef = doc(db, 'users', userId, 'generatedDesigns', designId);
    await deleteDoc(designRef);
    
    return { success: true };
  } catch (error) {
    console.error('Error deleting design:', error);
    return { 
      success: false, 
      error: error instanceof Error ? error.message : 'Failed to delete design' 
    };
  }
}; 